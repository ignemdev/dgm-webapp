@{
    ViewData["Title"] = "Equipos";
}

<section id="equipo-mantenimiento-container">
    <zing-grid caption="Equipos"
               lang="es"
               layout-controls
               columns-control
               sort
               search
               pager
               page-size="10"
               page-size-options="2,3,6"
               layout="row"
               theme="ios"
               width="stretch"
               filter>
        <zg-data src="/api/equipo">
            <zg-param name="recordPath" value="result"></zg-param>
        </zg-data>
        <zg-button>
            <button id="equipo-mantenimiento-button-add" class="button default large fg-darkGrayBlue">
                <span class="mif-add mif-lg"></span>
            </button>
        </zg-button>
        <zg-colgroup>
            <zg-column type="number" index="id" header="Id"></zg-column>
            <zg-column index="nombre" header="Nombre"></zg-column>
            <zg-column index="pais" header="Pais"></zg-column>
            <zg-column type="datetime" index="creado" header="Creado"></zg-column>
            @*<zg-column index="estado.nombre" header="Estado" sort="disabled" filter="disabled"></zg-column> <!--switch-->*@
            <zg-column index="id" header="Estado" width="120" sort="disabled" filter="disabled" renderer="checkRenderer">
                <input class="equipo-mantenimiento-check-estado" type="checkbox" data-estado=[[record.idEstado]] onchange=checkEstadoHandler([[record.id]]) data-role="switch" data-cls-switch="mySwitch" data-cls-check="bd-cyan myCheck">
            </zg-column>
            <zg-column index="id" header="Operaciones" sort="disabled" filter="disabled">
                <zg-button>
                    <button class="button fg-darkGrayBlue equipo-mantenimiento-button-edit" onclick="editButtonHandler([[record.id]])"><span class="mif-pencil mif-lg"></span></button>
                </zg-button>
                <zg-button>
                    <button class="button alert equipo-mantenimiento-button-delete" onclick="deleteButtonHandler([[record.id]])"><span class="mif-bin mif-lg"></span></button>
                </zg-button>
            </zg-column>
        </zg-colgroup>
    </zing-grid>

    <div class="dialog"
         data-role="dialog"
         data-on-close="upsertModalOnCloseHandler()"
         id="equipo-mantenimiento-modal-upsert">

        <div class="dialog-title">Guardar/Editar Equipo</div>
        <div class="dialog-content">
            <partial name="_EquipoUpsert">
        </div>
        <div class="dialog-actions">
            <button class="button js-dialog-close">Cerrar</button>
        </div>
    </div>
</section>

@section Scripts{
@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
@{
    await Html.RenderPartialAsync("_CrudUtilities");
}
    <script>
        //references       
        const addButton = document.querySelector('#equipo-mantenimiento-button-add');
        const upsertModal = document.querySelector('#equipo-mantenimiento-modal-upsert');
        const upsertForm = document.querySelector('#equipo-mantenimiento-form-upsert');
        const zinggrid = document.querySelector('zing-grid');

        const selectConfig = {
            url: '/datasets/countries.json',
            selectId: '#equipo-mantenimiento-form-upsert #Pais',
            value: 'code',
            label: 'name'
        };

        const upsertConfig = {
            url: '/api/equipo',
            headers: { 'Content-Type': 'application/json'}
        };

        const upsertToggleConfig = {
            url: '/api/equipo/status',
            headers: { 'Content-Type': 'application/json'}
        };

        const confirmConfig = {
            title: 'Eliminando equipo!',
            message: '¿Esta seguro de que desea eliminar el equipo?'
        }

        //function
        const refreshGrid = () => zinggrid.refresh();

        const fillUpsertEquipoForm = async (equipo) => {
            upsertForm.elements['Id'].value = equipo?.id ?? '0';
            upsertForm.elements['Nombre'].value = equipo?.nombre ?? '';
            await initSelect(selectConfig, equipo?.pais);
        }

        function checkRenderer(stubArgument, cellDOMRef, cellRef){
            const check = cellDOMRef.querySelector('.equipo-mantenimiento-check-estado input[type=checkbox]');
            const estado = Number(check.dataset.estado);
            check.checked = (estado === 1) ? true : false;
        };

        //handlers
        const addButtonHandler = async (e) => {
            await initSelect(selectConfig);
            Metro.dialog.open(upsertModal);
        } 

        const editButtonHandler = async (id) =>  {
            const equipo = await getData(`/api/equipo/${id}`)
            await fillUpsertEquipoForm(equipo);
            Metro.dialog.open(upsertModal);
        };

        const deleteButtonHandler = async (id) => {
            showConfirm(confirmConfig, async () => {
                const response = await getData(`/api/equipo/${id}`,'DELETE');

                const {hasError, errorMessage} = response

                 if(hasError){
                     showToast(errorMessage, 'alert');
                   return;
                 }

                Metro.dialog.close($('.mantenimiento-confirm-dialog'));
                showToast('El equipo ha sido eliminado exitosamente.');
                refreshGrid();
            });
        }

        const checkEstadoHandler = async (id) => {
            debugger;
           const response = await upsertData(upsertToggleConfig, { id }, 'PUT');
           const {hasError, errorMessage} = response

            if(hasError){
                showToast(errorMessage, 'alert');
              return;
            }

            showToast('Cambio de estado exitoso.');

        }

        const upsertModalOnCloseHandler = () => {
            refreshGrid();
            fillUpsertEquipoForm({});
        }

        const upsertFormSubmitHandler = async (e) =>{
            e.preventDefault();
            const values = getObjectFromForm(e);
            const {Id, ...equipo} = values;

            const response = (Id === 0) ? 
                await upsertData(upsertConfig, equipo) :
                await upsertData(upsertConfig, {Id, ...equipo}, 'PUT');

            const {hasError, errorMessage} = response

            if(hasError){
                showToast(errorMessage, 'alert');
              return;
            }

            showToast('Equipo guardado exitosamente');
            Metro.dialog.close(upsertModal)
        }

        //listeners
        addButton.addEventListener('click', addButtonHandler);
        upsertForm.addEventListener('submit', upsertFormSubmitHandler)
    </script>
        }
